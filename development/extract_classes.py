from __future__ import print_function
import re
import sys
import os

'''utility to extract class names from a Typescript file'''

class_pattern = re.compile("export\W+class\W+(\w*)\W+", re.I)

def extract_typescript_classes(filename):
	classes = []
	statics = []
	with open(filename, 'rt') as handle:
		for line in handle:
			grp = class_pattern.search(line)
			if grp:
				if 'static class' in line:
					statics.append(grp.groups()[0])
				else:
					classes.append(grp.groups()[0])

	for c in classes:
		yield "{0} = _js_class(BABYLON.{0})".format(c)
	for s in statics:
		yield "{0} = BABYLON.{0} # static class".format(c)


def extract_module(directory):
	'''where <directory> is the abs path to the typsecript module directory'''

	print("----{0}-----".format(directory))

	files = os.listdir(directory)

	module_name = os.path.split(directory)[-1]
	if module_name[1].lower() == module_name[1]:
		module_name = module_name[0].lower() + module_name[1:]
	
	
	os.mkdir(module_name)

	for root, dirs, files in os.walk(directory):
		extracted = {}
		for f in files:
			if f.endswith(".ts"):
				print ("extracting module: {0} from {1}".format(f, directory + "/" + f) )		
				extracted[f] = []
				for kls in extract_typescript_classes(directory + "/" + f):
					extracted[f].append(kls)


		with open ("./" +  module_name + "/__init__.py", 'wt') as output:
			output.writelines('from org.Babylonjs.utils import BABYLON, _js_class\n')
			output.writelines('"""autogenerated wrapper stubs for Babylonjs {0} module"""\n'.format(module_name))

			for each in extracted:
				output.writelines("\n# from " + each)
				output.writelines('\n')
				for e in extracted[each]:
					output.writelines(e)
					output.writelines('\n')

		print("wrote {0}/__init__.py".format(module_name))

		for d in dirs:
			if d == os.path.split(directory)[-1]:
				continue
			print ("submodule : {0}".format(d))
			here = os.getcwd()
			os.chdir("./" + module_name)
			extract_module(directory + "/" + d)
			os.chdir(here)

		return



def extract_babylon(rootdir, target_dir):
	'''where rootdir is the abspath to the babylon source folder, ie Babylonjs/src'''
	os.chdir(target_dir)

	for d in os.listdir(rootdir):
		if os.path.isdir(rootdir + "/" + d):
			extract_module(rootdir + "/" + d)

if __name__ == '__main__':
	extract_babylon(sys.argv[-2], sys.argv[-1])